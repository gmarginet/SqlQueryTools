trigger:
- '*'

pool:
  vmImage: 'windows-2022'

variables:
  - name: solution
    value: '**/*.sln'
    readonly: true
  - name: buildPlatform
    value: 'Any CPU'
    readonly: true
  - name: buildConfiguration
    value: 'Release'
    readonly: true
  - name: vVsixVersion
    value: ''
    readonly: false



jobs:
- job: Build
  displayName: 'Build latest commit'
  steps:

  - powershell: |
      $vsixManifestPath = Resolve-Path $(Build.SourcesDirectory)\src\SqlQueryTools\source.extension.vsixmanifest
      Write-Host "vsixManifestPath = $vsixManifestPath"
      [xml]$vsixManifestContent = Get-Content $vsixManifestPath
      $vsixVersion = $vsixManifestContent.PackageManifest.Metadata.Identity.Version
      Write-Host "vsixVersion = $vsixVersion"
      Write-Host "##vso[task.setvariable variable=MyVsixVersion;isOutput=true]$vsixVersion"
      Write-Host "##vso[task.setvariable variable=vVsixVersion]$vsixVersion"
    name: GetCurrentVersion
    displayName: 'Read current vsix version from manifest file'

  - powershell: |
      Write-Host "VsixVersion = ${{ variables.vVsixVersion }}"
      Write-Host "VsixVersion = $(MyVsixVersion)"
      $buildInfo = @{
        VsixVersion = $(MyVsixVersion)
      }
      $buildInfo | ConvertTo-Json  | Out-File "$(Build.ArtifactStagingDirectory)\BuildInfo.json"
    displayName: 'Create BuildInfo.json'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish artifact'
    inputs:
      artifactName: 'drop'
      TargetPath: '$(Build.ArtifactStagingDirectory)'



- job: Check
  displayName: 'Check if the current build needs to be released'
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  steps:

  - task: DownloadGitHubRelease@0
    displayName: 'Download the latest release from GitHub'
    inputs:
      connection: 'github release connection'
      userRepository: 'gmarginet/SqlQueryTools'
      defaultVersionType: 'latest'
      itemPattern: '**/*.vsix'
      downloadPath: '$(System.ArtifactsDirectory)'

  - task: ExtractFiles@1
    displayName: 'Extract the latest release'
    inputs:
      archiveFilePatterns: '$(System.ArtifactsDirectory)/*.vsix'
      destinationFolder: '$(System.ArtifactsDirectory)/PreviousRelease'
      cleanDestinationFolder: true
      overwriteExistingFiles: false

  - powershell: |
      $previousVsixManifestPath = Resolve-Path $(System.ArtifactsDirectory)\PreviousRelease\extension.vsixmanifest
      Write-Host "previousVsixManifestPath = $previousVsixManifestPath"
      [xml]$previousVsixManifestContent = Get-Content $previousVsixManifestPath
      $previousVsixVersion = $previousVsixManifestContent.PackageManifest.Metadata.Identity.Version
      Write-Host "previousVsixVersion = $previousVsixVersion"
      Write-Host "##vso[task.setvariable variable=MyPreviousVsixVersion;]$previousVsixVersion"
    displayName: 'Read previous vsix version from manifest file of previous release'



- job: Deploy
  dependsOn:
  - Build
  - Check
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'), ne(dependencies.Build.outputs['GetCurrentVersion.MyVsixVersion'], variables['MyPreviousVsixVersion']))
  steps:
  - task: DownloadBuildArtifacts@1
    displayName: 'Download artifact'
    inputs:
      artifactName: 'drop'
      downloadPath: '$(System.ArtifactsDirectory)'
  - powershell: |
      $buildInfoJsonPath = Resolve-Path $(System.ArtifactsDirectory)\drop\BuildInfo.json
      Write-Host "buildInfoJsonPath = $buildInfoJsonPath"
      $buildInfo = Get-Content $buildInfoJsonPath | ConvertFrom-Json
      Write-Host "vsixVersion = $($buildInfo.VsixVersion)"
    displayName: 'Read BuildInfo.json'
