trigger:
- '*'

pool:
  vmImage: 'windows-2022'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

jobs:
#############################
#    Build_SqlQueryTools    #
#############################
- job: Build_SqlQueryTools
  displayName: 'Build latest SqlQueryTools commit'
  steps:

  - task: NuGetToolInstaller@1
    displayName: 'Install nuget tool 4.7.1'
    inputs:
      versionSpec: '4.7.1'

  - task: NuGetCommand@2
    displayName: 'Restore nuget packages for SqlQueryTools solution'
    inputs:
      command: 'restore'
      restoreSolution: '**/SqlQueryTools.sln'

  - task: VSBuild@1
    displayName: 'Build SqlQueryTools solution'
    inputs:
      solution: '**\SqlQueryTools.sln'
      maximumCpuCount: true
      platform: '$(buildPlatform)'
      configuration: '$(buildConfiguration)'

  - task: CopyFiles@2
    displayName: 'Copy result of build to Artifact folder'
    inputs:
      SourceFolder: '$(Build.SourcesDirectory)'
      Contents: |
        README.md
        publish.extension.manifest.json
        **/SqlQueryTools.vsix
      TargetFolder: '$(Build.StagingDirectory)/Artifact'
      CleanTargetFolder: true
      flattenFolders: true

  - task: PublishPipelineArtifact@1
    displayName: 'Publish Artifact folder'
    inputs:
      targetPath: '$(Build.StagingDirectory)/Artifact'
      artifact: 'SqlQueryTools'
      publishLocation: 'pipeline'

  - task: PowerShell@2
    name: CurrentVsixManifest
    displayName: 'Read current vsix version from manifest file'
    inputs:
      targetType: 'inline'
      script: |
        $vsixManifestPath = Resolve-Path $(Build.SourcesDirectory)\src\SqlQueryTools\source.extension.vsixmanifest
        [xml]$vsixManifestContent = Get-Content $vsixManifestPath
        $vsixVersion = $vsixManifestContent.PackageManifest.Metadata.Identity.Version
        echo "Found vsix version = $vsixVersion"
        echo "##vso[task.setvariable variable=VsixVersion;isOutput=true]$vsixVersion"

############################################
#    Get_Previous_SqlQueryTools_Release    #
############################################
- job: Get_Previous_SqlQueryTools_Release
  displayName: 'Get previous SqlQueryTools release'
  dependsOn:
  - Build_SqlQueryTools
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  steps:

  - checkout: none

  - task: DownloadGitHubRelease@0
    displayName: 'Download the latest release from GitHub'
    inputs:
      connection: 'github release connection'
      userRepository: 'gmarginet/SqlQueryTools'
      defaultVersionType: 'latest'
      itemPattern: '**/*.vsix'
      downloadPath: '$(Build.StagingDirectory)/PreviousGitHubRelease'

  - task: ExtractFiles@1
    displayName: 'Extract the latest release'
    inputs:
      archiveFilePatterns: '$(System.ArtifactsDirectory)/PreviousGitHubRelease/*.vsix'
      destinationFolder: '$(System.ArtifactsDirectory)/PreviousGitHubRelease/Content'
      cleanDestinationFolder: true
      overwriteExistingFiles: false

  - task: PowerShell@2
    name: PreviousVsixManifest
    displayName: 'Read previous vsix version from manifest file'
    inputs:
      targetType: 'inline'
      script: |
        $vsixManifestPath = Resolve-Path $(System.ArtifactsDirectory)\PreviousGitHubRelease\Content\extension.vsixmanifest
        [xml]$vsixManifestContent = Get-Content $vsixManifestPath
        $vsixVersion = $vsixManifestContent.PackageManifest.Metadata.Identity.Version
        echo "Found vsix version = $vsixVersion"
        echo "##vso[task.setvariable variable=VsixVersion;isOutput=true]$vsixVersion"

##############################
#    Deploy_SqlQueryTools    #
##############################
- job: Deploy_SqlQueryTools
  displayName: 'Deploy latest SqlQueryTools commit'
  dependsOn:
  - Build_SqlQueryTools
  - Get_Previous_SqlQueryTools_Release
  condition: |
    and(
      succeeded(),
      eq(variables['Build.SourceBranch'], 'refs/heads/master'),
      ne(dependencies.Build_SqlQueryTools.outputs['CurrentVsixManifest.VsixVersion'],
         dependencies.Get_Previous_SqlQueryTools_Release.outputs['PreviousVsixManifest.VsixVersion'])
    )
  variables:
    currentVsixVersion: $[ dependencies.Build_SqlQueryTools.outputs['CurrentVsixManifest.VsixVersion'] ]
  steps:

  - checkout: none

  - task: DownloadPipelineArtifact@2
    displayName: 'Download artifact'
    inputs:
      buildType: 'current'
      artifactName: 'SqlQueryTools'
      targetPath: '$(Build.StagingDirectory)/Artifact'

  - task: PowerShell@2
    displayName: 'tmp'
    inputs:
      targetType: 'inline'
      script: |
        echo "Start Deploy of $(currentVsixVersion)"
        $vsixPath = Resolve-Path $(Build.StagingDirectory)\Artifact\
        Get-ChildItem $vsixPath

#  - task: GitHubRelease@1
#    displayName: 'Publish new release to GitHub'
#    inputs:
#      gitHubConnection: 'github release connection'
#      repositoryName: 'gmarginet/SqlQueryTools'
#      action: 'create'
#      target: '$(Build.SourceVersion)'
#      tagSource: 'userSpecifiedTag'
#      tag: 'v$(currentVsixVersion)'
#      assets: '$(Build.StagingDirectory)/Artifact/SqlQueryTools.vsix'
#      changeLogCompareToRelease: 'lastFullRelease'
#      changeLogType: 'issueBased'
#      changeLogLabels: 

  - task: PowerShell@2
    displayName: 'Publish new release to Marketplace'
    inputs:
      targetType: 'inline'
      script: |
        $personalAccessToken = ${env:PAT_MARKETPLACE}
        $vsixPath = Resolve-Path  $(Build.StagingDirectory)\Artifact\SqlQueryTools.vsix
        $publishManifestPath = Resolve-Path $(Build.StagingDirectory)\Artifact\publish.extension.manifest.json
        # Find the location of VsixPublisher
        $Installation = & "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe" -latest -prerelease -format json | ConvertFrom-Json
        $vsixPublisher = Join-Path -Path $Installation.installationPath -ChildPath "VSSDK\VisualStudioIntegration\Tools\Bin\VsixPublisher.exe" -Resolve
        echo "vsix publisher path = $vsixPublisher"